# from pyrogram import Client, filters
# from pyrogram.types import Message
# import config
# from pyromod import listen
# from pyrogram.errors import (
#     ApiIdInvalid,
#     PhoneNumberInvalid,
#     PhoneCodeInvalid,
#     PhoneCodeExpired,
#     SessionPasswordNeeded,
#     PasswordHashInvalid
# )



# api_id = config.API_ID
# api_hash = config.API_HASH
# client = Client(":nikki:", api_id, api_hash)
# # async def main(client):
# #     api_id = config.API_ID
# #     api_hash = config.API_HASH
# #     phone_number = ""
# #     client = Client(":memory:", api_id, api_hash)
# #     await client.connect()
# #     sent_code_info = await client.send_code(phone_number)
# #     phone_code = input("Please enter your phone code: ")  # Sent phone code using last function
# #     await client.sign_in(phone_number, sent_code_info.phone_code_hash, phone_code)

# @Client.on_message(filters.command('login'))
# async def log(bot: Client, msg: Message):
#     # await msg.reply('lets start login process...')
#     user_id = msg.chat.id
#     t = 'Please send your Phone Number with Country code\nExample : `+19876543210`'
#     # nr = await msg.reply_text(f'Please send your Phone Number with Country code',reply_to_msg_id = msg.msg_id,reply_markup=ForceReply(True),disable_web_page_preview=True)
#     phone_number_msg = await bot.ask(user_id, t, filters=filters.text)
#     phone_number = phone_number_msg.text
#     print(phone_number)
    
#     await client.connect()
#     print('ok')
#     sent_code_info = await client.send_code(phone_number)
#     phone_code_msg = await bot.ask(user_id, "Please check for an OTP in official telegram account. If you got it, send OTP here after reading the below format. \nIf OTP is `12345`, **please send it as** `1 2 3 4 5`.", filters=filters.text, timeout=600)
#     phone_code = phone_code_msg.text.replace(" ", "") 
#     try:
#         await client.sign_in(phone_number, sent_code_info.phone_code_hash, phone_code)
#     except PhoneCodeExpired:
#         await msg.reply('OTP is expired. Please start login process again.')
#     except SessionPasswordNeeded:
#         try:
#             two_step_msg = await bot.ask(user_id, 'Your account has enabled two-step verification. Please provide the password.', filters=filters.text, timeout=300)
#         except TimeoutError:
#             await msg.reply('Time limit reached of 5 minutes. Please start login process again.')
#             return
#         try:
#             password = two_step_msg.text
#             await client.check_password(password=password)
#         except PasswordHashInvalid:
#             await two_step_msg.reply('Invalid Password Provided. Please start login process again.', quote=True)
#             return